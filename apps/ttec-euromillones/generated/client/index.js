
Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  NotFoundError,
  decompressFromBase64,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
} = require('./runtime/data-proxy')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.14.1
 * Query Engine version: d9a4c5988f480fa576d43970d5a23641aa77bc9c
 */
Prisma.prismaVersion = {
  client: "4.14.1",
  engine: "d9a4c5988f480fa576d43970d5a23641aa77bc9c"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.NotFoundError = NotFoundError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}


  const path = require('path')

/**
 * Enums
 */

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  estado: 'estado',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};
exports.Estado = {
  ACTIVE: 'ACTIVE',
  BLOCK: 'BLOCK',
  UNSUBSCRIBED: 'UNSUBSCRIBED'
};

exports.Role = {
  NORMAL: 'NORMAL',
  ADMIN: 'ADMIN',
  GOD: 'GOD'
};

exports.Prisma.ModelName = {
  User: 'User'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Aure\\DESARROLLOS\\js\\deno\\deno-oak-prisma\\apps\\ttec-euromillones\\generated\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [],
    "previewFeatures": [
      "deno"
    ],
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": "..\\..\\..\\..\\.env"
  },
  "relativePath": "..\\..\\prisma",
  "clientVersion": "4.14.1",
  "engineVersion": "d9a4c5988f480fa576d43970d5a23641aa77bc9c",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "dataProxy": true,
  "postinstall": false
}

const fs = require('fs')

config.dirname = __dirname
if (!fs.existsSync(path.join(__dirname, 'schema.prisma'))) {
  warnOnce('bundled-warning-1', 'Your generated Prisma Client could not immediately find its `schema.prisma`, falling back to finding it via the current working directory.')
  warnOnce('bundled-warning-2', 'We are interested in learning about your project setup. We\'d appreciate if you could take the time to share some information with us.')
  warnOnce('bundled-warning-3', 'Please help us by answering a few questions: https://pris.ly/bundler-investigation')
  config.dirname = path.join(process.cwd(), "generated\\client")
  config.isBundled = true
}

const compressedDMMF = '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'
const decompressedDMMF = decompressFromBase64(compressedDMMF)
// We are parsing 2 times, as we want independent objects, because
// DMMFClass introduces circular references in the dmmf object
const dmmf = JSON.parse(decompressedDMMF)
exports.Prisma.dmmf = JSON.parse(decompressedDMMF)
config.document = dmmf


config.inlineSchema = 'Ly8gVGhpcyBpcyB5b3VyIFByaXNtYSBzY2hlbWEgZmlsZSwNCi8vIGxlYXJuIG1vcmUgYWJvdXQgaXQgaW4gdGhlIGRvY3M6IGh0dHBzOi8vcHJpcy5seS9kL3ByaXNtYS1zY2hlbWENCg0KZ2VuZXJhdG9yIGNsaWVudCB7DQogIHByb3ZpZGVyID0gInByaXNtYS1jbGllbnQtanMiDQogIHByZXZpZXdGZWF0dXJlcyA9IFsiZGVubyJdDQogIG91dHB1dCA9ICIuLi9nZW5lcmF0ZWQvY2xpZW50Ig0KfQ0KDQoNCmRhdGFzb3VyY2UgZGIgew0KICBwcm92aWRlciA9ICJwb3N0Z3Jlc3FsIg0KICB1cmwgICAgICA9IGVudigiREFUQUJBU0VfVVJMX1BPU1RfVFRFQ19FVVJPTUlMTE9ORVMiKQ0KfQ0KDQptb2RlbCBVc2VyIHsNCiAgaWQgICAgICAgICBJbnQgICAgICAgQGlkICAgDQogIG5hbWUgICAgICAgU3RyaW5nIA0KICBlbWFpbCAgICAgIFN0cmluZyAgICBAdW5pcXVlDQogIHBhc3N3b3JkICAgU3RyaW5nICANCiAgZXN0YWRvICAgICBFc3RhZG8gICAgQGRlZmF1bHQoQkxPQ0spDQogIHJvbGUgICAgICAgUm9sZSAgICAgIEBkZWZhdWx0KE5PUk1BTCkNCiAgLy8gdXNlcnhSb2xlICBVc2VyeFJvbGVbXQ0KICBjcmVhdGVkQXQgIERhdGVUaW1lICBAZGVmYXVsdChub3coKSkNCiAgdXBkYXRlZEF0ICBEYXRlVGltZSAgQHVwZGF0ZWRBdA0KfQ0KDQoNCi8vIG1vZGVsIFVzZXJ4Um9sZSB7DQovLyAgIGlkICAgICAgICAgSW50IEBpZCBAZGVmYXVsdChhdXRvaW5jcmVtZW50KCkpDQovLyAgIHVzZXJJZCAgICAgSW50IA0KLy8gICB1c2VyIFVzZXIgIEByZWxhdGlvbihmaWVsZHM6IFt1c2VySWRdLCByZWZlcmVuY2VzOiBbaWRdKQ0KLy8gICByb2xlICAgICAgIFJvbGUgIEBkZWZhdWx0KE5PUk1BTCkNCiAgDQovLyB9DQoNCg0KZW51bSBSb2xlIHsgIA0KICBOT1JNQUwNCiAgQURNSU4NCiAgR09EDQp9DQplbnVtIEVzdGFkbyB7ICANCiAgQUNUSVZFDQogIEJMT0NLDQogIFVOU1VCU0NSSUJFRCANCn0='
config.inlineSchemaHash = 'f325043189629e8a231746c0a1386e54b068d14ae80dff5e66d6426401c9c0c6'

config.inlineDatasources = {
  "db": {
    "url": {
      "fromEnvVar": "DATABASE_URL_POST_TTEC_EUROMILLONES",
      "value": null
    }
  }
}


const { warnEnvConflicts } = require('./runtime/data-proxy')

warnEnvConflicts({
    rootEnvPath: config.relativeEnvPaths.rootEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.rootEnvPath),
    schemaEnvPath: config.relativeEnvPaths.schemaEnvPath && path.resolve(config.dirname, config.relativeEnvPaths.schemaEnvPath)
})


const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

